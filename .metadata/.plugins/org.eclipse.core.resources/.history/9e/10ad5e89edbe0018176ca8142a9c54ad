package Linkedlist;

public class intlinkedlist {
	private Node head;
	class Node{
		private int value;
		private Node link;	
	}
	public intlinkedlist() {
		head = new Node();
		head.value = 0;
		head.link = null;
	}
	
	public intlinkedlist(int item) {
		head = new Node();
		head.value = item;
		head.link = null;
	}
	
	
	
	public boolean insert(int item) {
		Node n = new Node();
		n.value = item;
		n.link = head;
		head = n;
		return true;
	}
	
	public boolean delete(int item) {
		if(head.value == item) {
			head = head.link;
			return true;
		}
		else {
			Node x = head;
			Node y = head.link;
			while(true) {
				if(y == null || y.value == item) {
					break;
				}
				else {
					x = y;
					y = y.link;
				}
			}
			if(y != null) {
				x.link = y.link;
				return true;
			}
			else {
				return false;
			}
			
		}
	}
	
	
	public void printall() {
		Node z = head;
		while(z != null) {
			System.out.println(z.value);
			z = z.link;
		}
		
	}
	
	
	public void addtwolist(intlinkedlist l1, intlinkedlist l2) {
		intlinkedlist n1= l1;
		intlinkedlist m1= l2;
		

		intlinkedlist sum = new intlinkedlist();
		int x1 = 0;
		int y1 = 0;
		int s1 = 0;
		
		while(n1 != null || m1 != null) {
			 
				Node h1 = n1.head;
				x1 = (h1 != null) ? h1.value : 0;

				Node h2 = m1.head;
				y1 = (h2 != null )? h2.value : 0;

				s1 = s1 + x1 + y1 ;
				int nv = s1 % 10 ;  
				sum.insert(nv);
				s1 = s1/10;
				
				if (h1 != null) h1 = h1.link;
		        if (h2 != null) h2 = h2.link;
			
		}
			
		}
		
		
	}
	

